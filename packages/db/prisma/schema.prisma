generator client {
  provider = "prisma-client-js"
  output   = "../../../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  name         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  memberships  Membership[]
}

model Org {
  id           String       @id @default(uuid())
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  memberships  Membership[]
  contacts     Contact[]
  segments     Segment[]
  campaigns    Campaign[]
  sequences    Sequence[]

  @@index([name])
}

model Membership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  @@unique([userId, orgId])
  @@index([orgId])
}

enum ContactType {
  Individual
  Organization
  Foundation
  Government
  Corporate
  Other
}

model Contact {
  id             String   @id @default(uuid())
  orgId          String
  type           ContactType
  roles          String[] @db.Text[] @default([])
  honorific      String?
  firstName      String
  middleName     String?
  lastName       String?
  aliases        String?
  attribution    String?
  pronouns       String?
  jobTitle       String?
  company        String?
  primaryEmail   String
  alternateEmails String[] @db.Text[] @default([])
  website        String?
  socialMedia    String?
  primaryAddress Json?
  phoneNumbers   String[] @db.Text[] @default([])
  dateOfBirth    DateTime?
  documents      Json?
  mailingLists   String[] @db.Text[] @default([])
  donations      Json?
  doNotEmail     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  org            Org      @relation(fields: [orgId], references: [id])
  segments       SegmentMember[]

  @@index([orgId, primaryEmail], name: "contact_org_email")
}

model Segment {
  id        String          @id @default(uuid())
  orgId     String
  name      String
  dslJson   Json
  members   SegmentMember[]
  campaigns Campaign[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  org       Org             @relation(fields: [orgId], references: [id])

  @@index([orgId, name])
}

model SegmentMember {
  segmentId String
  contactId String
  orgId     String
  segment   Segment @relation(fields: [segmentId], references: [id])
  contact   Contact @relation(fields: [contactId], references: [id])

  @@id([segmentId, contactId])
  @@index([orgId])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
}

model Campaign {
  id          String         @id @default(uuid())
  orgId       String
  name        String
  contentJson Json
  status      CampaignStatus @default(DRAFT)
  sendAt      DateTime?
  segmentId   String?
  segment     Segment?       @relation(fields: [segmentId], references: [id])
  org         Org            @relation(fields: [orgId], references: [id])

  @@index([orgId, status])
}

model Sequence {
  id        String        @id @default(uuid())
  orgId     String
  name      String
  steps     SequenceStep[]
  segmentId String?
  segment   Segment?      @relation(fields: [segmentId], references: [id])
  org       Org           @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model SequenceStep {
  id         String   @id @default(uuid())
  sequenceId String
  delayHours Int
  contentJson Json
  order      Int
  sequence   Sequence @relation(fields: [sequenceId], references: [id])

  @@index([sequenceId, order], name: "step_order")
}

model EmailTemplate {
  id          String                   @id @default(uuid())
  name        String
  contentJson Json
  createdBy   String
  updatedAt   DateTime                @updatedAt
  snapshots   EmailTemplateSnapshot[]
  campaigns   EmailCampaign[]
}

model EmailTemplateSnapshot {
  id         String        @id @default(uuid())
  template   EmailTemplate @relation(fields: [templateId], references: [id])
  templateId String
  html       String
  createdAt  DateTime      @default(now())
}

model EmailCampaign {
  id          String        @id @default(uuid())
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  templateId  String
  subject     String
  fromName    String
  fromEmail   String
  segmentId   String?
  status      String
  scheduledAt DateTime?
  messages    EmailMessage[]
}

model EmailMessage {
  id         String        @id @default(uuid())
  campaign   EmailCampaign @relation(fields: [campaignId], references: [id])
  campaignId String
  recipient  String
  variables  Json
  status     String
  sentAt     DateTime?
}

model EmailAsset {
  id        String @id @default(uuid())
  url       String
  width     Int
  height    Int
  createdBy String
}
